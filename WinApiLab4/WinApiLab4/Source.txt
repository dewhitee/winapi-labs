// 2. Программно реализовать поиск 10 файлов с расширением . txt . 
// Создать на с:\ каталог FIND , внутри каталога создать файл find.dat. 
// Записать в данный файл полные имена всех найденных файлов и даты создания. 
// Реализовать функцию просмотра содержания файла.

#include <iostream>
#include <windows.h>
#include <vector>
#include <string>
#include <iomanip>
#include <io.h>
#include <fcntl.h>

// Deniss Belovs 4801BD, 2 variant

using namespace std;

constexpr UINT8 maxFileExtensionLen = 32;

struct FoundFile
{
	wstring fileName = wstring();
	SYSTEMTIME creationTime = SYSTEMTIME();
};

struct FindFilesArgs
{
	WCHAR path[MAX_PATH] = L"C:\\FIND\\*.txt";
	WCHAR fileExtension[maxFileExtensionLen] = L".txt";
	UINT16 filesCount = 10;
};

FindFilesArgs InputFindFilesArgs();
vector<FoundFile> FindFiles(const FindFilesArgs& args);
wstring GetAttributesString(const WIN32_FIND_DATA& fd);
SYSTEMTIME GetCreationTime(const WIN32_FIND_DATA& fd);
VOID CreateFindDirectory();
HANDLE CreateFindFile();
VOID WriteAllFoundTxtFilesData(HANDLE hFile, vector<FoundFile>& foundFiles);
VOID PrintFindFileContents(HANDLE hFile);
VOID PrintCreationTime(SYSTEMTIME creationTime);
VOID TableHeader(int len1, wstring arg1, int len2, wstring arg2, wstring arg3);
VOID TableRow(int len1, wstring arg1, int len2, wstring arg2);

int main()
{
	_setmode(_fileno(stdout), _O_U16TEXT);

	int input;
	do
	{
		auto foundFiles = FindFiles(InputFindFilesArgs());
		CreateFindDirectory();
		HANDLE hFile = CreateFindFile();
		WriteAllFoundTxtFilesData(hFile, foundFiles);
		PrintFindFileContents(hFile);
		wcout << L"\nTry again? Enter 0 (or any non-number) to exit or any other number to continue > "; 
		wcin >> input;
		wcin.ignore();
		system("cls");
	} while (input);
	system("pause");
	return 0;
}

FindFilesArgs InputFindFilesArgs()
{
	FindFilesArgs outArgs;
	FindFilesArgs defaultArgs;

	wcout << "File extension to search for (default is " << outArgs.fileExtension << "). Leave it empty (press ENTER) for default extension.\n > ";
	wcin.getline(outArgs.fileExtension, maxFileExtensionLen);

	wstring fe = wstring(outArgs.fileExtension);
	fe.empty() || fe == L" "
		? swprintf_s(outArgs.fileExtension, L"%s", defaultArgs.fileExtension)
		: swprintf_s(outArgs.fileExtension, fe[0] != L'.' ? L".%s" : L"%s", fe.c_str());

	wcout << L"Path where to search for " << outArgs.fileExtension << " files (default is C:\\FIND\\). Leave it empty (or press ENTER) for default path.\n"
		<< L"Hint: type the path like so: C:\\myfolder\\mysubfolder\\ \n > ";
	wcin.getline(outArgs.path, MAX_PATH);

	wstring fp = wstring(outArgs.path);
	fp.empty() || fp == L" " || !iswalpha(fp[0])
		? swprintf_s(outArgs.path, L"C:\\FIND\\*%s", outArgs.fileExtension)
		: swprintf_s(outArgs.path, fp[fp.size() - 1] == L'\\' ? L"%s*%s" : L"%s\\*%s", fp.c_str(), outArgs.fileExtension);

	wcout << "Max files count to search for (default is 10). Leave it empty (press ENTER) for default max files count.\n > ";
	wstring filesCount;
	getline(wcin, filesCount);

	bool validFilesCount = true;
	for (WCHAR ch : filesCount)
	{
		if (!iswdigit(ch))
		{
			validFilesCount = false;
			break;
		}
	}
	outArgs.filesCount = validFilesCount && !filesCount.empty() ? stoi(filesCount) : defaultArgs.filesCount;

	if (outArgs.filesCount <= 0 || outArgs.filesCount > 1000)
		outArgs.filesCount = FindFilesArgs().filesCount;

	return outArgs;
}

vector<FoundFile> FindFiles(const FindFilesArgs& args)
{
	FindFilesArgs defaultArgs;

	vector<FoundFile> foundFiles;
	WIN32_FIND_DATA fd;

	wcout << L"\n --- Searching for "
		<< (args.filesCount == defaultArgs.filesCount ? "(default)" : "") << args.filesCount << L" "
		<< (wcscmp(args.fileExtension, defaultArgs.fileExtension) == 0 ? "(default)" : "") << args.fileExtension
		<< (args.filesCount == 1 ? L" file" : L" files") << " at the "
		<< (wcscmp(args.path, defaultArgs.path) == 0 ? "(default)" : "") << args.path 
		<< " path.\nFiles found: \n";

	HANDLE hFindFile = FindFirstFile(args.path, &fd);
	if (hFindFile == INVALID_HANDLE_VALUE)
	{
		wcout << L"\nNo file has been found.\n";
	}
	else
	{
		UINT16 fileCounter = 0;
		TableHeader(61, L"Filename", 32, L"Attributes", L"Creation time");
		do
		{
			SYSTEMTIME creationTime = GetCreationTime(fd);
			TableRow(60, fd.cFileName, 32, GetAttributesString(fd));
			PrintCreationTime(creationTime);
			foundFiles.push_back(FoundFile{ fd.cFileName, creationTime });

			fileCounter++;
		} 
		while (FindNextFile(hFindFile, &fd) && fileCounter < args.filesCount);

		FindClose(hFindFile);
	}
	return foundFiles;
}

wstring GetAttributesString(const WIN32_FIND_DATA& fd)
{
	WCHAR attributes[64];
	swprintf_s(attributes, L"%s %s %s %s",
		(fd.dwFileAttributes & FILE_ATTRIBUTE_HIDDEN ? L"Hidden " : L"Not hidden"),
		(fd.dwFileAttributes & FILE_ATTRIBUTE_READONLY ? L"Readonly" : L""),
		(fd.dwFileAttributes & FILE_ATTRIBUTE_ENCRYPTED ? L"Encrypted" : L""),
		(fd.dwFileAttributes & FILE_ATTRIBUTE_COMPRESSED ? L"Compressed" : L""));
	return wstring(attributes);
}

SYSTEMTIME GetCreationTime(const WIN32_FIND_DATA& fd)
{
	SYSTEMTIME creationSystemTime;
	FileTimeToSystemTime(&fd.ftCreationTime, &creationSystemTime);
	return creationSystemTime;
}

VOID CreateFindDirectory()
{
	wcout << L"\n --- Creating FIND directory...\n";
	if (CreateDirectory(L"C:\\FIND", NULL))
	{
		wcout << L"FIND directory has been created.\n";
	}
	else
	{
		switch (GetLastError())
		{
		case ERROR_ALREADY_EXISTS:
			wcout << L"The specified directory already exists.\n";
			return;
		case ERROR_PATH_NOT_FOUND:
			wcout << L"One or more intermediate directories do not exist.\n";
			return;
		}
	}
}

HANDLE CreateFindFile()
{
	wcout << L"\n --- Creating find.dat...\n";
	HANDLE hFile = CreateFile(L"C:\\FIND\\find.dat", GENERIC_WRITE | GENERIC_READ, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

	int fileSize = GetFileSize(hFile, NULL);
	if (!fileSize)
	{
		wcout << L"File is (re)created successfully!\n";
	}
	else // This shall never trigger as we always creating new file first
	{
		wcout << L"File is not empty! Something went wrong while creating the find.dat file.\n";
		wcout << L"File size = " << fileSize << endl;
	}

	return hFile;
}

VOID WriteAllFoundTxtFilesData(HANDLE hFile, vector<FoundFile>& foundFiles)
{
	SetFilePointer(hFile, 0, 0, FILE_BEGIN);
	wcout << L"\n --- Writing to find.dat...\n";
	if (foundFiles.size() > 0)
	{
		for (int i = 0; i < foundFiles.size(); i++)
		{
			DWORD numberOfWrittenBytes;
			WriteFile(hFile, &foundFiles[i], sizeof(FoundFile), &numberOfWrittenBytes, NULL);
		}
		wcout << "All files were written successfully!\n";
	}
	else
	{
		wcout << "Nothing to wrote!\n";
	}
}

VOID PrintFindFileContents(HANDLE hFile)
{
	DWORD fileSize = GetFileSize(hFile, NULL);
	SetFilePointer(hFile, 0, 0, FILE_BEGIN);
	wcout << L"\n --- Reading find.dat...\n";
	if (!fileSize)
	{
		wcout << L"find.dat is empty! No files with the specified extension found...\n\n";
	}
	else
	{
		try
		{
			DWORD size = fileSize / sizeof(FoundFile);
			wcout << L"FileSize = " << fileSize << L", size = " << size << endl;

			if (size == UINT_MAX)
				throw std::bad_array_new_length();

			FoundFile* foundFiles = new FoundFile[size];
			DWORD bytesRead;
			if (!ReadFile(hFile, foundFiles, sizeof(FoundFile) * size, &bytesRead, NULL))
			{
				wcout << L"Something went wrong while trying to read find.dat...\n";
			}
			TableHeader(6, L"Index", 60, L"Filename", L"Creation time");
			for (int i = 0; i < size; i++)
			{
				TableRow(6, to_wstring(i), 60, foundFiles[i].fileName);
				PrintCreationTime(foundFiles[i].creationTime);
			}
			wcout << L"bytes read: " << bytesRead << endl << endl;

		}
		catch (std::bad_array_new_length e)
		{
			wcout << L"Bad size Error! Check if you have properly typed the path.\n";
		}
	}
	CloseHandle(hFile);
}

VOID PrintCreationTime(SYSTEMTIME creationTime)
{
	wcout << L"Created at: ";
	WCHAR previousFill = wcout.fill('0');
	wcout << right << setw(2) << creationTime.wHour << L":" << setw(2) << creationTime.wMinute << L":" << setw(2) << creationTime.wSecond << L" "
		<< setw(2) << creationTime.wDay << L"/" << setw(2) << creationTime.wMonth << L"/" << setw(2) << creationTime.wYear << endl;
	wcout.fill(previousFill);
}

VOID TableHeader(int len1, wstring arg1, int len2, wstring arg2, wstring arg3)
{
	constexpr WCHAR line[] = L"-----------------------------------------------------------------------------------------------------------------";
	wcout << left << setw(len1 - 2) << arg1 << L" " << L"| " << setw(len2 - 2) << arg2 << L"| " << arg3 << endl;
	wcout << line << endl;
}

VOID TableRow(int len1, wstring arg1, int len2, wstring arg2)
{
	wcout << left << setw(len1) << arg1 << L"| " << setw(len2 - 2) << arg2 << L"| ";
}
